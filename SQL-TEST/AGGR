-- 1. Count the number of employees in each department

SELECT department_id, COUNT(*) AS sum_salary
FROM hr.employees
GROUP BY department_id;

-- 2. Find the average salary in each department

SELECT department_id, AVG(salary) AS avg_salary
FROM hr.employees
GROUP BY department_id;

-- 3. Find the maximum and minimum salary in each department

SELECT department_id, MAX(salary) AS max_salary, MIN(salary) AS min_salary
FROM hr.employees
GROUP BY department_id;

-- 4. Find the total salary paid in each department

SELECT department_id, SUM(salary) AS sum_salary
FROM hr.employees
GROUP BY department_id;

-- 5. Count the number of employees in each job role

SELECT job_id, COUNT(*) AS TOTAL_EMP
FROM hr.employees
GROUP BY job_id;

-- 6. Find the average salary for each job role

SELECT job_id, AVG(salary) AS avg_salary
FROM hr.employees
GROUP BY job_id;

-- 7. Find the maximum salary for each job role

SELECT job_id, MAX(salary) AS max_salary
FROM hr.employees
GROUP BY job_id;

-- 8. Find the minimum salary for each job role

SELECT job_id, MIN(salary) AS min_salary
FROM hr.employees
GROUP BY job_id;

-- 9. Find the total salary paid for each job role

SELECT job_id, SUM(salary) AS TOTAL_SALARY
FROM hr.employees
GROUP BY job_id;

-- 10. Count the number of employees hired in each year

SELECT EXTRACT(YEAR FROM hire_date) AS hire_year, COUNT(*) AS total_employees
FROM hr.employees
GROUP BY EXTRACT(YEAR FROM hire_date)
ORDER BY hire_year;

-- 11. Find the total salary paid in each location

SELECT d.location_id, SUM(e.salary) AS total_salary
FROM hr.employees e
JOIN departments d ON e.department_id = d.department_id
GROUP BY d.location_id;

-- 12. Find the number of employees in each manager's team

SELECT manager_id, COUNT(*) AS team_size
FROM hr.employees
WHERE manager_id IS NOT NULL
GROUP BY manager_id;

-- 13. Find the highest salary for each manager

SELECT manager_id, MAX(salary) AS max_salary
FROM hr.employees
WHERE manager_id IS NOT NULL
GROUP BY manager_id;

-- 14. Find the average salary for each manager's team

SELECT manager_id, AVG(salary) AS avg_salary
FROM hr.employees
WHERE manager_id IS NOT NULL
GROUP BY manager_id;

-- 15. Count the number of employees hired in each month of the year

SELECT EXTRACT(MONTH FROM hire_date) AS hire_month, COUNT(*) AS total_hired
FROM hr.employees
GROUP BY EXTRACT(MONTH FROM hire_date)
ORDER BY hire_month;

-- 16. Find the department with the highest total salary

SELECT department_id, SUM(salary) AS total_salary
FROM hr.employees
GROUP BY department_id
ORDER BY total_salary DESC
FETCH FIRST 1 ROW ONLY;

-- 17. Find the job role with the highest average salary

SELECT job_id, AVG(salary) AS avg_salary
FROM hr.employees
GROUP BY job_id
ORDER BY avg_salary DESC
FETCH FIRST 1 ROW ONLY;

-- 18. Find the number of employees in each city

SELECT l.city, COUNT(*) AS total_employees
FROM hr.employees e
JOIN departments d ON e.department_id = d.department_id
JOIN locations l ON d.location_id = l.location_id
GROUP BY l.city;

-- 19. Find the number of employees who have a commission, grouped by department

SELECT department_id, COUNT(*) AS employees_with_commission
FROM hr.employees
WHERE commission_pct IS NOT NULL
GROUP BY department_id;

-- 20. Find the sum of salaries for employees who have a commission, grouped by department

SELECT department_id, SUM(salary) AS total_salary_with_commission
FROM hr.employees
WHERE commission_pct IS NOT NULL
GROUP BY department_id;

----------------ASSAINMENT-------------------------


-- -- -- 1. Count the number of sales transactions for each product.  

-- -- SELECT PROD_id,  COUNT(*) AS TRANSACTION_COUNT
-- -- FROM sh.SALES
-- -- GROUP BY PROD_ID
-- -- ORDER BY TRANSACTION_COUNT DESC;
-- ------------------------------------------------------------------------
-- -- 2. Find the average sale amount for each product.  

-- SELECT PROD_ID,  
--        AVG(AMOUNT_SOLD) AS AVERAGE_SALE_AMOUNT
-- FROM SH.SALES
-- GROUP BY PROD_ID
-- ORDER BY AVERAGE_SALE_AMOUNT DESC;
---------------------------------------------------------------------------------------------
-- -- 3. Find the maximum and minimum sale amount for each product.  

-- SELECT PROD_ID,  
--        MAX(AMOUNT_SOLD) AS MAX_SALE_AMOUNT, 
--        MIN(AMOUNT_SOLD) AS MIN_SALE_AMOUNT
-- FROM SH.SALES
-- GROUP BY PROD_ID
-- ORDER BY MAX_SALE_AMOUNT DESC;
-- ------------------------------------------------------------------

-- -- 4. Find the total revenue generated by each product.  

-- SELECT PROD_ID,  
--        SUM(AMOUNT_SOLD) AS TOTAL_REVENUE
-- FROM sh.SALES
-- GROUP BY PROD_ID
-- ORDER BY TOTAL_REVENUE DESC;

-- ----------------------------------------------------------------------------------------------

-- -- 5. Count the number of sales transactions for each customer.  
-- SELECT CUST_ID, 
--        COUNT(*) AS TRANSACTION_COUNT
-- FROM sh.SALES
-- GROUP BY CUST_ID
-- ORDER BY TRANSACTION_COUNT DESC;
-- --------------------------------------------------------------------------------------------------
-- -- 6. Find the average sale amount per customer.  

-- SELECT CUST_ID, 
--        AVG(AMOUNT_SOLD) AS AVG_SALE_AMOUNT
-- FROM sh.SALES
-- GROUP BY CUST_ID
-- ORDER BY AVG_SALE_AMOUNT DESC;
--------------------------------------------------------------------------------------------------
-- -- 7. Find the highest purchase amount for each customer. 

-- SELECT CUST_ID ,
--        MAX(amount_sold) AS HIGHEST_PURCHASE_AMOUNT
-- FROM sh.SALES
-- GROUP BY CUST_ID
-- ORDER BY HIGHEST_PURCHASE_AMOUNT DESC;
--------------------------------------------------------------------------------------------------------
-- -- 8. Find the lowest purchase amount for each customer.  

-- SELECT CUST_ID, 
--        MIN(AMOUNT_SOLD) AS LOWEST_PURCHASE_AMOUNT
-- FROM sh.SALES
-- GROUP BY CUST_ID
-- ORDER BY LOWEST_PURCHASE_AMOUNT ASC;
----------------------------------------------------------------------------------------------------
-- -- 10. Count the number of sales transactions for each region.  

-- -- 13. Count the number of sales per month.  

-- SELECT  EXTRACT(MONTH FROM TIME_ID) AS MONTH, 
--        COUNT(*) AS SALES_COUNT
-- FROM sh.SALES
-- GROUP BY EXTRACT(MONTH FROM TIME_ID)
-- ORDER BY  MONTH;

-- ------------------------------------------------------------------------------------------------------------
-- -- 14. Find the total revenue per month.  

-- SELECT 
--        EXTRACT(MONTH FROM time_id) AS MONTH,
--        SUM(amount_sold) AS TOTAL_REVENUE,COUNT(*) AS SALES_COUNT
-- FROM sh.SALES
-- GROUP BY EXTRACT(MONTH FROM TIME_ID)
-- ORDER BY  MONTH;
-- ---------------------------------------------------------------------------------------------------
-- -- -- 15. Find the product that generated the highest revenue.  


-- --SELECT * FROM SH.SALES;

-- -- SELECT PROD_ID, 
-- --        SUM( AMOUNT_SOLD) AS TOTAL_REVENUE
-- -- FROM SH.SALES
-- -- GROUP BY PROD_ID
-- -- ORDER BY TOTAL_REVENUE DESC 
-- -- FETCH FIRST 1 ROW ONLY;



-- -- SELECT PROD_id, TOTAL_REVENUE 
-- -- FROM (
-- --     SELECT PROD_id, 
-- --            SUM(AMOUNT_SOLD) AS TOTAL_REVENUE
-- --     FROM sh.SALES
-- --     GROUP BY PROD_id
-- --     ORDER BY TOTAL_REVENUE DESC
-- -- ) WHERE ROWNUM = 1;
-- -- ---------------------------------------------------------------------------------------------------------





-- -- SELECT PROD_id, TOTAL_REVENUE 
-- -- FROM (
-- --     SELECT PROD_id, 
-- --            SUM(AMOUNT_SOLD) AS TOTAL_REVENUE,
-- --            RANK() OVER (ORDER BY SUM( AMOUNT_SOLD) DESC) AS RANKING
-- --     FROM sh.SALES
-- --     GROUP BY PROD_id
-- -- ) WHERE RANKING = 1;
-- ---------------------------------------------------------------------------------------------------------------

-- -- SELECT PROD_id, 
-- --            SUM(AMOUNT_SOLD) AS TOTAL_REVENUE
-- --     FROM sh.SALES
-- --     GROUP BY PROD_id order by TOTAL_REVENUE DESC  FETCH FIRST 1 ROW ONLY;

-------------------------------------------------------------------------------------------------------------------------
-- -- 16. Find the most frequently purchased product.  

-- -- SELECT PROD_id, COUNT(*) AS PURCHASE_COUNT
-- -- FROM sh.SALES
-- -- GROUP BY PROD_id
-- -- ORDER BY PURCHASE_COUNT DESC
-- -- FETCH FIRST 1 ROW ONLY;

---------------------------------------------------------------------------------------------------------------------
-- -- 17. Find the most valuable customer based on total spending.  

-- SELECT CUST_ID,  SUM(amount_sold) AS TOTAL_SPENT
-- FROM sh.SALES
-- GROUP BY CUST_ID
-- ORDER BY TOTAL_SPENT DESC FETCH FIRST 1 ROW ONLY;  -- Oracle 12c+

-- ---------------------------------------------------------------------------------------------------------------------

-- SELECT cust_id,sum(amount_sold) as total ,MAX(amount_sold) as max_purchase,sum(QUANTITY_SOLD)as C_N_T
-- from sh.SALES group by CUST_ID, QUANTITY_SOLD ORDER by total DESC ; 

-- ---------------------------------------------------------------------------------------------------------
-- SELECT CUST_ID, max(amount_sold)
--  from sh.SALES
-- group by CUST_ID
-- order by MAX(AMOUNT_SOLD) DESC;

------------------------------------------------------------------------------------------------------------------------------------
-- -- 18. Find the total revenue per sales channel (e.g., online vs. offline).  

-- SELECT * FROM SH.SALES;


-- SELECT CHANNEL_ID, 
--        SUM(AMOUNT_SOLD) AS TOTAL_REVENUE
-- FROM SH.SALES
-- GROUP BY CHANNEL_ID
-- ORDER BY TOTAL_REVENUE DESC;

-------------------------------------------------------------------------------------------------------------------------------------
-- 19. Count the number of sales for each payment method.  


-- 20. Find the total revenue generated per payment method.  










